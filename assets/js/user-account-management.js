'use strict';

var $ = window.jQuery;

function showPassword() {
	// Cache our jquery elements
	var $submit = $('.btn-submit');
	var $field = $('.password-show');
	var show_pass = '<div class="a-form-show-password a-form-caption"><label><input type="checkbox" name="show_password" id="show-password-checkbox" value="1"> Show password</label></div>';
	// Inject the toggle button into the page
	$field.after(show_pass);
	// Cache the toggle button
	var $toggle = $('#show-password-checkbox');
	// Toggle the field type
	$toggle.on('click', function (e) {
		var checkbox = $(this);
		if (checkbox.is(':checked')) {
			$field.attr('type', 'text');
		} else {
			$field.attr('type', 'password');
		}
	});
	// Set the form field back to a regular password element
	$submit.on('click', function (e) {
		$field.attr('type', 'password');
	});
}

function checkPasswordStrength($password, $strengthMeter, $strengthText, $submitButton, blacklistArray) {
	var password = $password.val();

	// Reset the form & meter
	$submitButton.attr('disabled', 'disabled');
	$strengthText.removeClass('short bad good strong');

	// Extend our blacklist array with those from the inputs & site data
	blacklistArray = blacklistArray.concat(wp.passwordStrength.userInputBlacklist());

	// Get the password strength
	var strength = wp.passwordStrength.meter(password, blacklistArray, password);

	// Add the strength meter results
	switch (strength) {
		case 2:
			$strengthText.addClass('bad').html('Strength: ' + pwsL10n.bad);
			break;
		case 3:
			$strengthText.addClass('good').html('Strength: ' + pwsL10n.good);
			break;
		case 4:
			$strengthText.addClass('strong').html('Strength: ' + pwsL10n.strong);
			break;
		case 5:
			$strengthText.addClass('short').html('Strength: ' + pwsL10n.mismatch);
			break;
		default:
			$strengthText.addClass('short').html('Strength: ' + pwsL10n.short);
	}
	$strengthMeter.val(strength);

	// Only enable the submit button if the password is strong
	/*
 if ( 4 === strength ) {
     $submitButton.removeAttr( 'disabled' );
 }*/

	return strength;
}

$(document).ready(function () {
	// show password if user clicks
	if ($('.password-show').length > 0) {
		showPassword();
	}
	// checkPasswordStrength
	if ($('.password-strength-check').length > 0) {
		var $before = $('.a-form-show-password');
		$before.after($('<meter max="4" id="password-strength"><div></div></meter><p id="password-strength-text"></p>'));
		$('body').on('keyup', 'input[name=password], input[name=new_password]', function (event) {
			checkPasswordStrength($('input[name=password], input[name=new_password]'), // Password field
			$('#password-strength'), // Strength meter
			$('#password-strength-text'), // Strength text indicator
			$('input[type=submit]'), // Submit button
			['black', 'listed', 'word'] // Blacklisted words
			);
		});
	}
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImpRdWVyeSIsInNob3dQYXNzd29yZCIsIiRzdWJtaXQiLCIkZmllbGQiLCJzaG93X3Bhc3MiLCJhZnRlciIsIiR0b2dnbGUiLCJvbiIsImUiLCJjaGVja2JveCIsImlzIiwiYXR0ciIsImNoZWNrUGFzc3dvcmRTdHJlbmd0aCIsIiRwYXNzd29yZCIsIiRzdHJlbmd0aE1ldGVyIiwiJHN0cmVuZ3RoVGV4dCIsIiRzdWJtaXRCdXR0b24iLCJibGFja2xpc3RBcnJheSIsInBhc3N3b3JkIiwidmFsIiwicmVtb3ZlQ2xhc3MiLCJjb25jYXQiLCJ3cCIsInBhc3N3b3JkU3RyZW5ndGgiLCJ1c2VySW5wdXRCbGFja2xpc3QiLCJzdHJlbmd0aCIsIm1ldGVyIiwiYWRkQ2xhc3MiLCJodG1sIiwicHdzTDEwbiIsImJhZCIsImdvb2QiLCJzdHJvbmciLCJtaXNtYXRjaCIsInNob3J0IiwiZG9jdW1lbnQiLCJyZWFkeSIsImxlbmd0aCIsIiRiZWZvcmUiLCJldmVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxJQUFJQyxPQUFPQyxNQUFmOztBQUVBLFNBQVNDLFlBQVQsR0FBd0I7QUFDdkI7QUFDQSxLQUFJQyxVQUFVSixFQUFFLGFBQUYsQ0FBZDtBQUNBLEtBQUlLLFNBQVNMLEVBQUUsZ0JBQUYsQ0FBYjtBQUNBLEtBQUlNLFlBQVksd0tBQWhCO0FBQ0E7QUFDQUQsUUFBT0UsS0FBUCxDQUFjRCxTQUFkO0FBQ0E7QUFDQSxLQUFJRSxVQUFVUixFQUFFLHlCQUFGLENBQWQ7QUFDQTtBQUNBUSxTQUFRQyxFQUFSLENBQVcsT0FBWCxFQUFvQixVQUFTQyxDQUFULEVBQVk7QUFDL0IsTUFBSUMsV0FBV1gsRUFBRSxJQUFGLENBQWY7QUFDQSxNQUFJVyxTQUFTQyxFQUFULENBQVksVUFBWixDQUFKLEVBQTZCO0FBQzVCUCxVQUFPUSxJQUFQLENBQVksTUFBWixFQUFvQixNQUFwQjtBQUNBLEdBRkQsTUFFTztBQUNOUixVQUFPUSxJQUFQLENBQVksTUFBWixFQUFvQixVQUFwQjtBQUNBO0FBQ0QsRUFQRDtBQVFBO0FBQ0FULFNBQVFLLEVBQVIsQ0FBWSxPQUFaLEVBQXFCLFVBQVNDLENBQVQsRUFBWTtBQUNoQ0wsU0FBT1EsSUFBUCxDQUFZLE1BQVosRUFBb0IsVUFBcEI7QUFDQSxFQUZEO0FBR0E7O0FBRUQsU0FBU0MscUJBQVQsQ0FBZ0NDLFNBQWhDLEVBQTJDQyxjQUEzQyxFQUEyREMsYUFBM0QsRUFBMEVDLGFBQTFFLEVBQXlGQyxjQUF6RixFQUEwRztBQUN0RyxLQUFJQyxXQUFXTCxVQUFVTSxHQUFWLEVBQWY7O0FBRUE7QUFDQUgsZUFBY0wsSUFBZCxDQUFvQixVQUFwQixFQUFnQyxVQUFoQztBQUNBSSxlQUFjSyxXQUFkLENBQTJCLHVCQUEzQjs7QUFFQTtBQUNBSCxrQkFBaUJBLGVBQWVJLE1BQWYsQ0FBdUJDLEdBQUdDLGdCQUFILENBQW9CQyxrQkFBcEIsRUFBdkIsQ0FBakI7O0FBRUE7QUFDQSxLQUFJQyxXQUFXSCxHQUFHQyxnQkFBSCxDQUFvQkcsS0FBcEIsQ0FBMkJSLFFBQTNCLEVBQXFDRCxjQUFyQyxFQUFxREMsUUFBckQsQ0FBZjs7QUFFQTtBQUNBLFNBQVNPLFFBQVQ7QUFDSSxPQUFLLENBQUw7QUFDSVYsaUJBQWNZLFFBQWQsQ0FBd0IsS0FBeEIsRUFBZ0NDLElBQWhDLENBQXNDLGVBQWVDLFFBQVFDLEdBQTdEO0FBQ0E7QUFDSixPQUFLLENBQUw7QUFDSWYsaUJBQWNZLFFBQWQsQ0FBd0IsTUFBeEIsRUFBaUNDLElBQWpDLENBQXVDLGVBQWVDLFFBQVFFLElBQTlEO0FBQ0E7QUFDSixPQUFLLENBQUw7QUFDSWhCLGlCQUFjWSxRQUFkLENBQXdCLFFBQXhCLEVBQW1DQyxJQUFuQyxDQUF5QyxlQUFlQyxRQUFRRyxNQUFoRTtBQUNBO0FBQ0osT0FBSyxDQUFMO0FBQ0lqQixpQkFBY1ksUUFBZCxDQUF3QixPQUF4QixFQUFrQ0MsSUFBbEMsQ0FBd0MsZUFBZUMsUUFBUUksUUFBL0Q7QUFDQTtBQUNKO0FBQ0lsQixpQkFBY1ksUUFBZCxDQUF3QixPQUF4QixFQUFrQ0MsSUFBbEMsQ0FBd0MsZUFBZUMsUUFBUUssS0FBL0Q7QUFkUjtBQWdCQXBCLGdCQUFlSyxHQUFmLENBQW1CTSxRQUFuQjs7QUFFQTtBQUNBOzs7OztBQUtBLFFBQU9BLFFBQVA7QUFDSDs7QUFFRDNCLEVBQUVxQyxRQUFGLEVBQVlDLEtBQVosQ0FBa0IsWUFBVztBQUM1QjtBQUNBLEtBQUl0QyxFQUFFLGdCQUFGLEVBQW9CdUMsTUFBcEIsR0FBNkIsQ0FBakMsRUFBcUM7QUFDcENwQztBQUNBO0FBQ0Q7QUFDQSxLQUFJSCxFQUFFLDBCQUFGLEVBQThCdUMsTUFBOUIsR0FBdUMsQ0FBM0MsRUFBK0M7QUFDOUMsTUFBSUMsVUFBVXhDLEVBQUUsdUJBQUYsQ0FBZDtBQUNBd0MsVUFBUWpDLEtBQVIsQ0FBZVAsRUFBRSw4RkFBRixDQUFmO0FBQ0dBLElBQUcsTUFBSCxFQUFZUyxFQUFaLENBQWdCLE9BQWhCLEVBQXlCLGdEQUF6QixFQUNJLFVBQVVnQyxLQUFWLEVBQWtCO0FBQ2QzQix5QkFDSWQsRUFBRSxnREFBRixDQURKLEVBQ3lEO0FBQ3JEQSxLQUFFLG9CQUFGLENBRkosRUFFdUM7QUFDbkNBLEtBQUUseUJBQUYsQ0FISixFQUd1QztBQUNuQ0EsS0FBRSxvQkFBRixDQUpKLEVBSXVDO0FBQ25DLElBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsTUFBcEIsQ0FMSixDQUt1QztBQUx2QztBQU9ILEdBVEw7QUFXSDtBQUNELENBckJEIiwiZmlsZSI6InVzZXItYWNjb3VudC1tYW5hZ2VtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSB3aW5kb3cualF1ZXJ5O1xuXG5mdW5jdGlvbiBzaG93UGFzc3dvcmQoKSB7XG5cdC8vIENhY2hlIG91ciBqcXVlcnkgZWxlbWVudHNcblx0dmFyICRzdWJtaXQgPSAkKCcuYnRuLXN1Ym1pdCcpO1xuXHR2YXIgJGZpZWxkID0gJCgnLnBhc3N3b3JkLXNob3cnKTtcblx0dmFyIHNob3dfcGFzcyA9ICc8ZGl2IGNsYXNzPVwiYS1mb3JtLXNob3ctcGFzc3dvcmQgYS1mb3JtLWNhcHRpb25cIj48bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJzaG93X3Bhc3N3b3JkXCIgaWQ9XCJzaG93LXBhc3N3b3JkLWNoZWNrYm94XCIgdmFsdWU9XCIxXCI+IFNob3cgcGFzc3dvcmQ8L2xhYmVsPjwvZGl2Pic7XG5cdC8vIEluamVjdCB0aGUgdG9nZ2xlIGJ1dHRvbiBpbnRvIHRoZSBwYWdlXG5cdCRmaWVsZC5hZnRlciggc2hvd19wYXNzICk7XG5cdC8vIENhY2hlIHRoZSB0b2dnbGUgYnV0dG9uXG5cdHZhciAkdG9nZ2xlID0gJCgnI3Nob3ctcGFzc3dvcmQtY2hlY2tib3gnKTtcblx0Ly8gVG9nZ2xlIHRoZSBmaWVsZCB0eXBlXG5cdCR0b2dnbGUub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXHRcdHZhciBjaGVja2JveCA9ICQodGhpcyk7XG5cdFx0aWYgKGNoZWNrYm94LmlzKCc6Y2hlY2tlZCcpKSB7XG5cdFx0XHQkZmllbGQuYXR0cigndHlwZScsICd0ZXh0Jyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRmaWVsZC5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XG5cdFx0fVxuXHR9KTtcblx0Ly8gU2V0IHRoZSBmb3JtIGZpZWxkIGJhY2sgdG8gYSByZWd1bGFyIHBhc3N3b3JkIGVsZW1lbnRcblx0JHN1Ym1pdC5vbiggJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXHRcdCRmaWVsZC5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjaGVja1Bhc3N3b3JkU3RyZW5ndGgoICRwYXNzd29yZCwgJHN0cmVuZ3RoTWV0ZXIsICRzdHJlbmd0aFRleHQsICRzdWJtaXRCdXR0b24sIGJsYWNrbGlzdEFycmF5ICkge1xuICAgIHZhciBwYXNzd29yZCA9ICRwYXNzd29yZC52YWwoKTtcblxuICAgIC8vIFJlc2V0IHRoZSBmb3JtICYgbWV0ZXJcbiAgICAkc3VibWl0QnV0dG9uLmF0dHIoICdkaXNhYmxlZCcsICdkaXNhYmxlZCcgKTtcbiAgICAkc3RyZW5ndGhUZXh0LnJlbW92ZUNsYXNzKCAnc2hvcnQgYmFkIGdvb2Qgc3Ryb25nJyApO1xuXG4gICAgLy8gRXh0ZW5kIG91ciBibGFja2xpc3QgYXJyYXkgd2l0aCB0aG9zZSBmcm9tIHRoZSBpbnB1dHMgJiBzaXRlIGRhdGFcbiAgICBibGFja2xpc3RBcnJheSA9IGJsYWNrbGlzdEFycmF5LmNvbmNhdCggd3AucGFzc3dvcmRTdHJlbmd0aC51c2VySW5wdXRCbGFja2xpc3QoKSApXG5cbiAgICAvLyBHZXQgdGhlIHBhc3N3b3JkIHN0cmVuZ3RoXG4gICAgdmFyIHN0cmVuZ3RoID0gd3AucGFzc3dvcmRTdHJlbmd0aC5tZXRlciggcGFzc3dvcmQsIGJsYWNrbGlzdEFycmF5LCBwYXNzd29yZCApO1xuXG4gICAgLy8gQWRkIHRoZSBzdHJlbmd0aCBtZXRlciByZXN1bHRzXG4gICAgc3dpdGNoICggc3RyZW5ndGggKSB7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICRzdHJlbmd0aFRleHQuYWRkQ2xhc3MoICdiYWQnICkuaHRtbCggJ1N0cmVuZ3RoOiAnICsgcHdzTDEwbi5iYWQgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAkc3RyZW5ndGhUZXh0LmFkZENsYXNzKCAnZ29vZCcgKS5odG1sKCAnU3RyZW5ndGg6ICcgKyBwd3NMMTBuLmdvb2QgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAkc3RyZW5ndGhUZXh0LmFkZENsYXNzKCAnc3Ryb25nJyApLmh0bWwoICdTdHJlbmd0aDogJyArIHB3c0wxMG4uc3Ryb25nICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgJHN0cmVuZ3RoVGV4dC5hZGRDbGFzcyggJ3Nob3J0JyApLmh0bWwoICdTdHJlbmd0aDogJyArIHB3c0wxMG4ubWlzbWF0Y2ggKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgJHN0cmVuZ3RoVGV4dC5hZGRDbGFzcyggJ3Nob3J0JyApLmh0bWwoICdTdHJlbmd0aDogJyArIHB3c0wxMG4uc2hvcnQgKTtcbiAgICB9XG4gICAgJHN0cmVuZ3RoTWV0ZXIudmFsKHN0cmVuZ3RoKTtcblxuICAgIC8vIE9ubHkgZW5hYmxlIHRoZSBzdWJtaXQgYnV0dG9uIGlmIHRoZSBwYXNzd29yZCBpcyBzdHJvbmdcbiAgICAvKlxuICAgIGlmICggNCA9PT0gc3RyZW5ndGggKSB7XG4gICAgICAgICRzdWJtaXRCdXR0b24ucmVtb3ZlQXR0ciggJ2Rpc2FibGVkJyApO1xuICAgIH0qL1xuXG4gICAgcmV0dXJuIHN0cmVuZ3RoO1xufVxuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0Ly8gc2hvdyBwYXNzd29yZCBpZiB1c2VyIGNsaWNrc1xuXHRpZiAoJCgnLnBhc3N3b3JkLXNob3cnKS5sZW5ndGggPiAwICkge1xuXHRcdHNob3dQYXNzd29yZCgpO1xuXHR9XG5cdC8vIGNoZWNrUGFzc3dvcmRTdHJlbmd0aFxuXHRpZiAoJCgnLnBhc3N3b3JkLXN0cmVuZ3RoLWNoZWNrJykubGVuZ3RoID4gMCApIHtcblx0XHR2YXIgJGJlZm9yZSA9ICQoJy5hLWZvcm0tc2hvdy1wYXNzd29yZCcpO1xuXHRcdCRiZWZvcmUuYWZ0ZXIoICQoJzxtZXRlciBtYXg9XCI0XCIgaWQ9XCJwYXNzd29yZC1zdHJlbmd0aFwiPjxkaXY+PC9kaXY+PC9tZXRlcj48cCBpZD1cInBhc3N3b3JkLXN0cmVuZ3RoLXRleHRcIj48L3A+JykpO1xuXHQgICAgJCggJ2JvZHknICkub24oICdrZXl1cCcsICdpbnB1dFtuYW1lPXBhc3N3b3JkXSwgaW5wdXRbbmFtZT1uZXdfcGFzc3dvcmRdJyxcblx0ICAgICAgICBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdCAgICAgICAgICAgIGNoZWNrUGFzc3dvcmRTdHJlbmd0aChcblx0ICAgICAgICAgICAgICAgICQoJ2lucHV0W25hbWU9cGFzc3dvcmRdLCBpbnB1dFtuYW1lPW5ld19wYXNzd29yZF0nKSwgLy8gUGFzc3dvcmQgZmllbGRcblx0ICAgICAgICAgICAgICAgICQoJyNwYXNzd29yZC1zdHJlbmd0aCcpLCAgICAgICAgICAgLy8gU3RyZW5ndGggbWV0ZXJcblx0ICAgICAgICAgICAgICAgICQoJyNwYXNzd29yZC1zdHJlbmd0aC10ZXh0JyksICAgICAgLy8gU3RyZW5ndGggdGV4dCBpbmRpY2F0b3Jcblx0ICAgICAgICAgICAgICAgICQoJ2lucHV0W3R5cGU9c3VibWl0XScpLCAgICAgICAgICAgLy8gU3VibWl0IGJ1dHRvblxuXHQgICAgICAgICAgICAgICAgWydibGFjaycsICdsaXN0ZWQnLCAnd29yZCddICAgICAgICAvLyBCbGFja2xpc3RlZCB3b3Jkc1xuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICk7XG5cdH1cbn0pO1xuIl19
